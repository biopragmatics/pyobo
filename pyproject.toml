# See https://setuptools.readthedocs.io/en/latest/build_meta.html
[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyobo"
version = "0.11.0"
description = "A python package for handling and generating OBO"
readme = "README.md"
authors = [
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" }
]
maintainers = [
    { name = "Charles Tapley Hoyt", email = "cthoyt@gmail.com" }
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#classifiers
# Search tags using the controlled vocabulary at https://pypi.org/classifiers
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: Pytest",
    "Framework :: tox",
    "Framework :: Sphinx",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
]
keywords = [
    "snekpack", # please keep this keyword to credit the cookiecutter-snekpack template
    "cookiecutter",
    "ontologies",
    "biomedical ontologies",
    "life sciences",
    "natural sciences",
    "bioinformatics",
    "cheminformatics",
    "Open Biomedical Ontologies",
    "OBO",
]

# License Information. This can be any valid SPDX identifiers that can be resolved
# with URLs like https://spdx.org/licenses/MIT
# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#license
license = { file = "LICENSE" }

requires-python = ">=3.9"
dependencies = [
    "obonet>=0.3.0",
    "click",
    "tqdm",
    "pyyaml",
    "pandas",
    "requests",
    "protmapper",
    "more_itertools",
    "more_click>=0.0.2",
    "humanize",
    "tabulate",
    "cachier",
    "pystow>=0.2.7",
    "bioversions>=0.5.514",
    "bioregistry>=0.10.20",
    "bioontologies>=0.4.0",
    "zenodo-client>=0.0.5",
    "class_resolver",
    "psycopg2-binary",
    "pydantic>=2.0",
    # Resource Downloaders
    "drugbank_downloader",
    "chembl_downloader",
    "umls_downloader>=0.1.3",
    "typing_extensions",
    "rdflib",
]

[project.optional-dependencies]
tests = [
    "pytest",
    "coverage",
]
docs = [
    "sphinx>=8",
    "sphinx-rtd-theme>=3.0",
    "sphinx-click", 
    "sphinx_automodapi",
]

# See https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#urls
[project.urls]
"Bug Tracker" = "https://github.com/biopragmatics/pyobo/issues"
Homepage = "https://github.com/biopragmatics/pyobo"
Repository = "https://github.com/biopragmatics/pyobo.git"
Documentation = "https://pyobo.readthedocs.io"

[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
# this implicitly sets `packages = ":find"`
where = ["src"]  # list of folders that contain the packages (["."] by default)

# See https://setuptools.pypa.io/en/latest/userguide/datafiles.html
[tool.setuptools.package-data]
"*" = ["*.*"]

[project.scripts]
pyobo = "pyobo.cli:main"

# TODO add entrypoints
# pyobo.xrefs =
#    cbms2019 = pyobo.xrefdb.sources.cbms2019:get_cbms2019_xrefs_df
#    chembl   = pyobo.xrefdb.sources.chembl:get_chembl_xrefs_df
#    compath  = pyobo.xrefdb.sources.compath:get_compath_xrefs_df
#    famplex  = pyobo.xrefdb.sources.famplex:get_famplex_xrefs_df
#    gilda    = pyobo.xrefdb.sources.gilda:get_gilda_xrefs_df
#    intact   = pyobo.xrefdb.sources.intact:get_xrefs_df
#    ncit     = pyobo.xrefdb.sources.ncit:get_ncit_xrefs_df
#    pubchem  = pyobo.xrefdb.sources.pubchem:get_pubchem_mesh_df
#    wikidata = pyobo.xrefdb.sources.wikidata:get_wikidata_xrefs_df
#    biomappings = pyobo.xrefdb.sources.biomappings:get_biomappings_df

[tool.cruft]
skip = [
    "**/__init__.py",
    "tests/*"
]

# MyPy, see https://mypy.readthedocs.io/en/stable/config_file.html
[tool.mypy]
plugins = [
    "pydantic.mypy",
]

# Doc8, see https://doc8.readthedocs.io/en/stable/readme.html#ini-file-usage
[tool.doc8]
max-line-length = 120

# Pytest, see https://docs.pytest.org/en/stable/reference/customize.html#pyproject-toml
[tool.pytest.ini_options]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage, see https://coverage.readthedocs.io/en/latest/config.html
[tool.coverage.run]
branch = true
source = [
    "pyobo",
]
omit = [
    "tests/*",
    "docs/*",
]

[tool.coverage.paths]
source = [
    "src/pyobo",
    ".tox/*/lib/python*/site-packages/pyobo",
]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == \"__main__\":",
    "if TYPE_CHECKING:",
    "def __str__",
    "def __repr__",
]

[tool.ruff]
line-length = 100
extend-include = ["*.ipynb"]

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules
extend-select = [
    "F", # pyflakes
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "C90", # mccabe
    "I", # isort
    "UP", # pyupgrade
    "D", # pydocstyle
    "DOC", # pydoclint
    "B", # bugbear
    "S", # bandit
    "T20", # print
    "N", # pep8 naming
    "ERA", # eradicate commented out code
    "NPY", # numpy checks
    "RUF", # ruff rules
    "C4", # comprehensions
]
ignore = [
    "D105", # Missing docstring in magic method
    "E203", # Black conflicts with the following
    # Everything below is TODO
    "ERA001",
    "S113",
    "C901",
    "E501",
    "RUF012",
    "S320",
    "S314",
]

# See https://docs.astral.sh/ruff/settings/#per-file-ignores
[tool.ruff.lint.per-file-ignores]
# Ignore security issues in the version.py, which are inconsistent
"src/pyobo/version.py" = ["S603", "S607"]
# Ignore commented out code in Sphinx configuration file
"docs/source/conf.py" = ["ERA001"]
# Prints are okay in notebooks
"notebooks/**/*.ipynb" = ["T201"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.isort]
relative-imports-order = "closest-to-furthest"
known-third-party = [
    "tqdm",
]
known-first-party = [
    "pyobo",
    "tests",
]

[tool.ruff.format]
# see https://docs.astral.sh/ruff/settings/#format_docstring-code-format
docstring-code-format = true

[tool.bumpversion]
current_version = "0.11.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(?:-(?P<release>[0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+(?P<build>[0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?"
serialize = [
    "{major}.{minor}.{patch}-{release}+{build}",
    "{major}.{minor}.{patch}+{build}",
    "{major}.{minor}.{patch}-{release}",
    "{major}.{minor}.{patch}",
]
commit = true
tag = false

[tool.bumpversion.parts.release]
optional_value = "production"
first_value = "dev"
values = [
    "dev",
    "production",
]

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "docs/source/conf.py"
search = "release = \"{current_version}\""
replace = "release = \"{new_version}\""

[[tool.bumpversion.files]]
filename = "src/pyobo/version.py"
search = "VERSION = \"{current_version}\""
replace = "VERSION = \"{new_version}\""
