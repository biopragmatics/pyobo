"""Test for OBO header."""

import tempfile
import unittest
from collections.abc import Iterable
from pathlib import Path
from textwrap import dedent

import bioontologies.robot

from pyobo import default_reference
from pyobo.struct.reference import OBOLiteral
from pyobo.struct.struct import Obo, build_ontology, make_ad_hoc_ontology
from pyobo.struct.struct_utils import Annotation
from pyobo.struct.typedef import has_license


class TestOBOHeader(unittest.TestCase):
    """Test ontologies."""

    def assert_lines(self, text: str, lines: Iterable[str]) -> None:
        """Assert the lines are equal."""
        self.assertEqual(dedent(text).strip(), "\n".join(lines).strip())

    def assert_obo_lines(self, text, ontology: Obo) -> None:
        """Assert OBO header has the right lines."""
        self.assert_lines(text, ontology.iterate_obo_lines())

    def assert_owl_lines(self, text: str, ontology: Obo) -> None:
        """Assert OWL header has the right lines."""
        with tempfile.TemporaryDirectory() as directory:
            in_path = Path(directory).joinpath("tmp.ofn")
            ontology.write_ofn(in_path)
            out_path = Path(directory).joinpath("tmp.owl")
            bioontologies.robot.convert(in_path, out_path, check=False)
            lines = out_path.read_text().splitlines()
            lines = [
                "" if not line.strip() else line
                for line in lines
                if not line.startswith("<!-- Generated by the OWL API")
            ]
            self.assert_lines(text, lines)

    def test_2_data_version(self) -> None:
        """Test ontology definition."""
        ontology = build_ontology(
            prefix="xxx",
            version="1.0",
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            data-version: 1.0
            ontology: xxx
            """,
            ontology,
        )

    def test_5_data_version(self) -> None:
        """Test ontology definition."""
        ontology = build_ontology(
            prefix="xxx",
            auto_generated_by="test",
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            auto-generated-by: test
            ontology: xxx
            """,
            ontology,
        )

    def test_6_import(self) -> None:
        """Test imports."""

    def test_7_subsets(self) -> None:
        """Test ontology definition."""
        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
            _subsetdefs=[(default_reference("xxx", "HELLO"), "test")],
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            subsetdef: HELLO "test"
            ontology: xxx
            """,
            ontology,
        )

        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
            _subsetdefs=[(default_reference("go", "HELLO"), "test")],
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            subsetdef: obo:go#HELLO "test"
            ontology: xxx
            """,
            ontology,
        )

    def test_8_synonymtypedef(self) -> None:
        """Test ontology synonym type definitions."""

    def test_9_default_namespace(self) -> None:
        """Test default namespace."""

    def test_10_namespace_id_rule(self) -> None:
        """Test namespace-id-rule."""

    def test_11_idspace(self) -> None:
        """Test idspace definitions."""
        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
            _idspaces={
                "go": "http://purl.obolibrary.org/obo/GO_",
            },
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            ontology: xxx
            """,
            ontology,
        )

    def test_12_xrefs_equivalent(self) -> None:
        """Test treat-xrefs-as-equivalent."""

    def test_13_xrefs_differentia(self) -> None:
        """Test treat-xrefs-as-genus-differentia."""

    def test_14_xrefs_rels(self) -> None:
        """Test treat-xrefs-as-relationship."""

    def test_15_xrefs_is_a(self) -> None:
        """Test treat-xrefs-as-is_a."""

    def test_16_remark(self) -> None:
        """Test remark."""

    def test_17_ontology(self) -> None:
        """Test ontology definition."""
        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            ontology: xxx
            """,
            ontology,
        )

    def test_18_properties(self) -> None:
        """Test properties."""
        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
            _root_terms=[default_reference("xxx", "ROOT1")],
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            ontology: xxx
            property_value: IAO:0000700 ROOT1
            """,
            ontology,
        )

    def test_18_properties_bioregistry(self) -> None:
        """Test auto-populating."""
        ontology = make_ad_hoc_ontology(
            _ontology="go",
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            idspace: dcterms http://purl.org/dc/terms/ "Dublin Core Metadata Initiative Terms"
            idspace: doap http://usefulinc.com/ns/doap# "Description of a Project"
            idspace: foaf http://xmlns.com/foaf/0.1/ "Friend of a Friend"
            idspace: orcid https://orcid.org/ "Open Researcher and Contributor"
            ontology: go
            property_value: dcterms:license "CC-BY-4.0" xsd:string
            property_value: dcterms:description "The Gene Ontology project provides a controlled vocabulary to describe gene and gene product attributes in any organism." xsd:string
            property_value: foaf:homepage "http\\://geneontology.org/" xsd:anyURI
            property_value: doap:repository "https\\://github.com/geneontology/go-ontology" xsd:anyURI
            property_value: foaf:logo "https\\://obofoundry.org/images/go_logo.png" xsd:anyURI
            property_value: doap:maintainer orcid:0000-0001-6787-2901
            """,
            ontology,
        )

    def test_18_properties_escapes(self) -> None:
        """Test escapes in property values, like for parentheses."""
        ontology = build_ontology(
            prefix="xxx",
            description="MeSH (Medical Subject Headings)",
        )
        self.assert_obo_lines(
            r"""
            format-version: 1.4
            idspace: dcterms http://purl.org/dc/terms/ "Dublin Core Metadata Initiative Terms"
            ontology: xxx
            property_value: dcterms:description "MeSH \(Medical Subject Headings\)" xsd:string

            [Typedef]
            id: dcterms:description
            name: description
            is_metadata_tag: true
            """,
            ontology,
        )
        self.assert_owl_lines(
            """
            <?xml version="1.0"?>
            <rdf:RDF xmlns="https://w3id.org/biopragmatics/resources/xxx/xxx.ofn#"
                 xml:base="https://w3id.org/biopragmatics/resources/xxx/xxx.ofn"
                 xmlns:owl="http://www.w3.org/2002/07/owl#"
                 xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                 xmlns:xml="http://www.w3.org/XML/1998/namespace"
                 xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
                 xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
                 xmlns:dcterms="http://purl.org/dc/terms/">
                <owl:Ontology rdf:about="https://w3id.org/biopragmatics/resources/xxx/xxx.ofn">
                    <dcterms:description>MeSH (Medical Subject Headings)</dcterms:description>
                </owl:Ontology>



                <!--
                ///////////////////////////////////////////////////////////////////////////////////////
                //
                // Annotation properties
                //
                ///////////////////////////////////////////////////////////////////////////////////////
                 -->




                <!-- http://purl.org/dc/terms/description -->

                <owl:AnnotationProperty rdf:about="http://purl.org/dc/terms/description">
                    <rdfs:label>description</rdfs:label>
                </owl:AnnotationProperty>
            </rdf:RDF>
            """,
            ontology,
        )

    def test_18_properties_external(self) -> None:
        """Test properties."""
        ontology = make_ad_hoc_ontology(
            _ontology="xxx",
            _property_values=[
                Annotation(has_license.reference, OBOLiteral.string("CC0")),
            ],
        )
        self.assert_obo_lines(
            """\
            format-version: 1.4
            idspace: dcterms http://purl.org/dc/terms/ "Dublin Core Metadata Initiative Terms"
            ontology: xxx
            property_value: dcterms:license "CC0" xsd:string
            """,
            ontology,
        )
